def kfold_feature_learning(train, test, y, t_y, folds = 10, p_cutoff = None, 
                           out_dir = None, clf = linear_model.LassoCV(cv=10), 
                           output='light', scale=False, regcols = None, regdf = None,
                          keep_cols = None, save_int = True):
    
    # train is a subjects x variables dataframe
    # y is a pandas series with the same index as train. y should not be in train
    # train and test indices should just be a range
    # Reg cols are names of columns in regdf to regress out during the p_cutoff feature
    #    removal
    # Keep cols is a list of columns numbers you wish to keep in lasso no matter what
    
    #feature_matrix = pandas.DataFrame(np.zeros_like(train))
    predicted = []
    all_weights = pandas.DataFrame(np.zeros((folds,len(train.columns))))
    if save_int:
        ints = []
    start = 0

    if scale:
        master_scl = preprocessing.StandardScaler().fit(train)
        train = pandas.DataFrame(master_scl.transform(train),
                                 index=train.index,columns=train.columns)
        test = pandas.DataFrame(master_scl.transform(test),
                                 index=test.index,columns=test.columns)
        
    #for sub,row in train.loc[train.index[start:]].iterrows():
    fold = 1
    for tr_ix, te_ix in KFold(n_splits=folds).split(train):
        #i = train.index.tolist().index(sub)
        tmp_mtx = train.loc[train.index[tr_ix]]
        if regcols != None:
            ref = deepcopy(tmp_mtx)
            tmp_mtx.columns = ['x_%s'%x for x in tmp_mtx.columns]
            tmp_mtx['y'] = y.loc[tmp_mtx.index]
            stmnt = 'y ~'
            for z,col in enumerate(regcols):
                cov = 'cov_%s'%z
                tmp_mtx[cov] = regdf.loc[tmp_mtx.index][col]
                if z == 0:
                    stmnt += ' %s'%cov
                else:
                    stmnt += ' + %s'%cov
        else:
            regcols = []
        ps = []
        print('running correlation for fold %s of %s'%(fold,folds))
        if p_cutoff != None:
            if len(regcols) > 0:
                for x in range(tmp_mtx.shape[1] - (len(regcols) + 1)):
                    n_stmnt = '%s + x_%s'%(stmnt,x)
                    ps.append(smf.ols(stmnt,data=temp_mtx).fit().pvalues[-1])
                sig_mtx = ref.loc[ref.index[:]]
            else:
                for x in range(tmp_mtx.shape[1]):
                    ps.append(stats.pearsonr(
                            y[tmp_mtx.index].values,tmp_mtx.values[:,x])[1]
                         )
            ps_s = pandas.Series(ps)
            sig = ps_s[ps_s < p_cutoff]
            if len(sig) == 0:
                fold += 1
                continue
            sig_mtx = tmp_mtx[sig.index]
        else:
            sig_mtx = tmp_mtx[tmp_mtx.columns[:]]
        print('running lasso for fold %s of %s'%(fold,folds))
        if type(keep_cols) == list:
            for col in keep_cols:
                sig_mtx[col] = tmp_mtx.ix[:,col]
        lasso = clf.fit(sig_mtx,y[sig_mtx.index])
        all_weights.loc[(fold-1)][sig_mtx.columns] = lasso.coef_
        #feature_matrix.loc[fold][sig_mtx.columns] = lasso.coef_
        [predicted.append(x) for x in lasso.predict(train.loc[train.index[te_ix]][
                                                    sig_mtx.columns].values)]
        #predicted += jnk
        if save_int:
            ints.append(lasso.intercept_)
            print('intercept:',lasso.intercept_)
        fold += 1
        if len(regcols) == 0:
            regcols = None
        if out_dir != None and type(out_dir) == str:
            print('saving matrix for fold %s of %s'%(fold,folds))
            if not os.path.isdir(out_dir):
                os.mkdir(out_dir)
            feature_matrix.to_csv(os.path.join(out_dir,'lasso_weights.csv'))
            pandas.DataFrame(pandas.Series(predicted)).to_csv(
                                                    os.path.join(out_dir,'lasso_predicted.csv'))
        
    #final_weights = feature_matrix.mean(axis=0)
    final_weights = all_weights.mean(axis=0)
    print(len([i for i in final_weights.index if abs(final_weights[i]) > 0 ]),
          'features selected')
    r,p = stats.pearsonr(y[train.index],predicted)
    print('validation prediction accuracy is %s percent \n p = %s \n r = %s'%((r**2)*100,p,r))
    
    t_predicted = (test * np.array(final_weights)).sum(axis=1)
    if save_int:
        all_ints = np.mean(ints)
        t_predicted += all_ints
    else:
        all_ints = []
    r,p = stats.pearsonr(t_y[test.index],t_predicted)
    print('testing prediction accuracy is %s percent \n p = %s \n r = %s'%((r**2)*100,p,r))
    
    if output == 'light':
        return final_weights, predicted, t_predicted, all_ints
    else:
        return final_weights, predicted, t_predicted, all_weights, lasso 
    